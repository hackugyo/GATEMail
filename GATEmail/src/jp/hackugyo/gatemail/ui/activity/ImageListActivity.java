package jp.hackugyo.gatemail.ui.activity;import java.util.Collections;import java.util.LinkedList;import java.util.List;import jp.hackugyo.gatemail.Defines.Extra;import jp.hackugyo.gatemail.R;import jp.hackugyo.gatemail.ui.AbsFragmentActivity;import junit.framework.Assert;import android.content.Intent;import android.graphics.Bitmap;import android.os.Bundle;import android.view.View;import android.view.ViewGroup;import android.widget.AbsListView;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.BaseAdapter;import android.widget.ImageView;import android.widget.ListAdapter;import android.widget.ListView;import android.widget.TextView;import com.actionbarsherlock.view.Menu;import com.actionbarsherlock.view.MenuItem;import com.nostra13.universalimageloader.core.DisplayImageOptions;import com.nostra13.universalimageloader.core.assist.ImageLoadingListener;import com.nostra13.universalimageloader.core.assist.PauseOnScrollListener;import com.nostra13.universalimageloader.core.assist.SimpleImageLoadingListener;import com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;import com.nostra13.universalimageloader.core.display.RoundedBitmapDisplayer;public class ImageListActivity extends AbsFragmentActivity {    protected static final String STATE_PAUSE_ON_SCROLL = "STATE_PAUSE_ON_SCROLL";    protected static final String STATE_PAUSE_ON_FLING = "STATE_PAUSE_ON_FLING";    protected AbsListView mListView;    /** スクロール中，読み込みを一時停止するかどうか */    protected boolean mPauseOnScroll = false;    /** フリップ中，読み込みを一時停止するかどうか */    protected boolean mPauseOnFling = true;    DisplayImageOptions mOptions;    String[] imageUrls;    @SuppressWarnings("unused")    private final ImageListActivity self = this;    /***********************************************     * Life Cycle *     ***********************************************/    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_image_list);        Bundle bundle = getIntent().getExtras();        imageUrls = bundle.getStringArray(Extra.IMAGES);        mOptions = new DisplayImageOptions.Builder()//                .showStubImage(R.drawable.ic_stub)//                .showImageForEmptyUri(R.drawable.ic_empty)//                .showImageOnFail(R.drawable.ic_error)//                .cacheInMemory().cacheOnDisc()//                .displayer(new RoundedBitmapDisplayer(20))//                .build();        Assert.assertTrue(mImageLoader.isInited());    }    @Override    public void onStart() {        super.onStart();        mListView = (ListView) findViewById(android.R.id.list);        ((ListView) mListView).setAdapter(new ItemAdapter());        mListView.setOnItemClickListener(new OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                startImagePagerActivity(position);            }        });    }    @Override    public void onRestoreInstanceState(Bundle savedInstanceState) {        mPauseOnScroll = savedInstanceState.getBoolean(STATE_PAUSE_ON_SCROLL, false);        mPauseOnFling = savedInstanceState.getBoolean(STATE_PAUSE_ON_FLING, true);    }    @Override    public void onResume() {        super.onResume();        applyScrollListener();    }    @Override    public void onSaveInstanceState(Bundle outState) {        outState.putBoolean(STATE_PAUSE_ON_SCROLL, mPauseOnScroll);        outState.putBoolean(STATE_PAUSE_ON_FLING, mPauseOnFling);    }    /***********************************************     * Menu *     ***********************************************/    @Override    public boolean onPrepareOptionsMenu(Menu menu) {        //        MenuItem pauseOnScrollItem = menu.findItem(R.id.item_pause_on_scroll);        //        pauseOnScrollItem.setVisible(true);        //        pauseOnScrollItem.setChecked(pauseOnScroll);        //        //        MenuItem pauseOnFlingItem = menu.findItem(R.id.item_pause_on_fling);        //        pauseOnFlingItem.setVisible(true);        //        pauseOnFlingItem.setChecked(pauseOnFling);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {        //            case R.id.item_pause_on_scroll:        //                pauseOnScroll = !pauseOnScroll;        //                item.setChecked(pauseOnScroll);        //                applyScrollListener();        //                return true;        //            case R.id.item_pause_on_fling:        //                pauseOnFling = !pauseOnFling;        //                item.setChecked(pauseOnFling);        //                applyScrollListener();        //                return true;            default:                return super.onOptionsItemSelected(item);        }    }    @Override    public void onBackPressed() {        AnimateFirstDisplayListener.displayedImages.clear();        super.onBackPressed();    }    private void startImagePagerActivity(int position) {        // TODO あとで         Intent intent = new Intent(this, getClass());//ImagePagerActivity.class);        intent.putExtra(Extra.IMAGES, imageUrls);        intent.putExtra(Extra.IMAGE_POSITION, position);        startActivity(intent);    }    /***********************************************     * Image View Scroll *     ***********************************************/    private void applyScrollListener() {        mListView.setOnScrollListener(new PauseOnScrollListener(mImageLoader, mPauseOnScroll, mPauseOnFling));    }    /***********************************************     * Image View Adapter *     ***********************************************/    class ItemAdapter extends BaseAdapter implements ListAdapter {        @SuppressWarnings("unused")        private final ItemAdapter self = this;        private ImageLoadingListener mAnimateFirstListener = new AnimateFirstDisplayListener();        private class ViewHolder {            public TextView text;            public ImageView image;        }        @Override        public int getCount() {            return imageUrls.length;        }        @Override        public Object getItem(int position) {            return position;        }        @Override        public long getItemId(int position) {            return position;        }        @Override        public View getView(final int position, View convertView, ViewGroup parent) {            View view = convertView;            final ViewHolder holder;            if (convertView == null) {                view = getLayoutInflater().inflate(R.layout.item_list_image, parent, false);                holder = new ViewHolder();                holder.text = (TextView) view.findViewById(R.id.text);                holder.image = (ImageView) view.findViewById(R.id.image);                view.setTag(holder);            } else {                holder = (ViewHolder) view.getTag();            }            holder.text.setText("Item " + (position + 1));            if (mOptions != null) {                mImageLoader.displayImage(imageUrls[position], holder.image, mOptions, mAnimateFirstListener);            }            return view;        }    }    private static class AnimateFirstDisplayListener extends SimpleImageLoadingListener {        static final List<String> displayedImages = Collections.synchronizedList(new LinkedList<String>());        @Override        public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {            if (loadedImage != null) {                ImageView imageView = (ImageView) view;                boolean firstDisplay = !displayedImages.contains(imageUri);                if (firstDisplay) {                    FadeInBitmapDisplayer.animate(imageView, 500);                    displayedImages.add(imageUri);                }            }        }    }}